// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvitationStatus {
  pending
  accepted
  rejected
}

enum ChallengeType {
  alphanumeric
  alphanumeric_case_sensitive
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  password      String
  name          String?
  emailVerified Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  accessTokens AccessToken[] @relation("UserTokens")
  enterprises  Enterprise[]  @relation("UserEnterprises")
  employees    Employee[]

  @@index([createdAt])
  @@map("users")
}

model AccessToken {
  id           String    @id @default(uuid()) @db.Uuid
  refreshToken String?   @unique
  expiresAt    DateTime?

  userId Int
  user   User @relation("UserTokens", fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("access_tokens")
}

model Enterprise {
  id          String @id @default(uuid()) @db.Uuid
  slug        String @unique @db.VarChar(50)
  name        String @db.VarChar(80)
  description String @db.VarChar(300)

  ownerId Int
  owner   User @relation("UserEnterprises", fields: [ownerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  employees         Employee[]
  invitations       Invitation[]
  captchasTemplates CaptchaTemplate[]
  captchas          Captcha[]

  @@map("enterprises")
}

model Employee {
  id       String  @id @default(uuid()) @db.Uuid
  position String? @db.VarChar(50)

  enterpriseId String     @db.Uuid
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("employees")
}

model Invitation {
  id     String           @id @default(uuid()) @db.Uuid
  name   String           @db.VarChar(80)
  email  String           @db.VarChar(80)
  token  String           @unique @db.VarChar(64)
  status InvitationStatus

  enterpriseId String     @db.Uuid
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  acceptedAt DateTime?
  rejectedAt DateTime?

  @@index([email])
  @@index([status])
  @@map("invitations")
}

model CaptchaTemplate {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @unique @db.VarChar(255)
  type         ChallengeType
  isActive     Boolean       @default(true)
  privateKey   String        @db.VarChar(128)
  publicKey    String        @db.VarChar(128)
  enterpriseId String?       @db.Uuid
  enterprise   Enterprise?   @relation(fields: [enterpriseId], references: [id])
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt    DateTime?     @db.Timestamp(6)

  captchas Captcha[]

  @@index([privateKey], name: "idx_captcha_template_private_key")
  @@index([publicKey], name: "idx_captcha_template_public_key")
  @@index([type], name: "idx_captcha_template_type")
  @@index([isActive], name: "idx_captcha_template_is_active")
  @@index([enterpriseId], name: "idx_captcha_template_enterprise_id")
  @@map("captcha_templates")
}

model Captcha {
  id String @id @default(uuid()) @db.Uuid

  templateId String?          @db.Uuid
  template   CaptchaTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)

  enterpriseId String?     @db.Uuid
  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])

  type     ChallengeType @default(alphanumeric)
  answer   String        @db.VarChar(32)
  attempts Int           @default(0)
  isSolved Boolean       @default(false)

  userIdentifier String? @db.VarChar(255)
  ipAddress      String? @db.VarChar(45)

  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  captchaAttempts CaptchaAttempt[]

  @@index([templateId], name: "idx_captcha_template_id")
  @@index([type], name: "idx_captcha_type")
  @@index([isSolved], name: "idx_captcha_is_solved")
  @@index([userIdentifier], name: "idx_captcha_user_identifier")
  @@map("captchas")
}

model CaptchaAttempt {
  id String @id @default(uuid()) @db.Uuid

  captchaId String  @db.Uuid
  captcha   Captcha @relation(fields: [captchaId], references: [id], onDelete: Cascade)

  answer      String   @db.VarChar(32)
  attemptedAt DateTime @default(now()) @db.Timestamp(6)

  isCorrect      Boolean?
  userIdentifier String?  @db.VarChar(255)
  ipAddress      String?  @db.VarChar(45)

  @@index([captchaId])
  @@map("captcha_attempts")
}
