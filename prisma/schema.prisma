// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvitationStatus {
  pending
  accepted
  rejected
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt()

  accessTokens AccessToken[]
  entreprises  Enterprise[]
  employees    Employee[]
}

model AccessToken {
  id           String    @id @default(uuid()) @db.Uuid
  refreshToken String?   @unique
  expiresAt    DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Enterprise {
  id          String @id @default(uuid()) @db.Uuid
  slug        String @unique @db.VarChar(50)
  name        String @db.VarChar(80)
  description String @db.VarChar(300)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  employees   Employee[]
  invitations Invitation[]
}

model Employee {
  id       String  @id @default(uuid()) @db.Uuid
  position String? @db.VarChar(50)

  enterpriseId String     @db.Uuid
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}

model Invitation {
  id     String           @id @default(uuid()) @db.Uuid
  name   String           @db.VarChar(80)
  email  String           @db.VarChar(80)
  token  String           @unique
  status InvitationStatus

  enterpriseId String     @db.Uuid
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt()
  acceptedAt DateTime?
  rejectedAt DateTime?
}
